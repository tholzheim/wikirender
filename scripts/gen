#!/bin/bash
# WF 2021-03-27
# Generator Pipeline

# set for debugging
#  set -x

#ansi colors
#http://www.csc.uvic.ca/~sae/seng265/fall04/tips/s265s047-tips/bash-using-colors.html
blue='\033[0;34m'
red='\033[0;31m'
green='\033[0;32m' # '\e[1;32m' is too bright for white bg.
endColor='\033[0m'

#
# a colored message
#   params:
#     1: l_color - the color of the message
#     2: l_msg - the message to display
#
color_msg() {
  local l_color="$1"
  local l_msg="$2"
  echo -e "${l_color}$l_msg${endColor}"
}

#
# error
#
#   show an error message and exit
#
#   params:
#     1: l_msg - the message to display
error() {
  local l_msg="$1"
  # use ansi red for error
  color_msg $red "Error: $l_msg" 1>&2
  exit 1
}

#
# show the usage
#
usage() {
  echo "usage: $0 [-h|--help] -t|--target wiki"
  echo "  -h|--help: show this usage"
  echo "  -s|--source: source wiki - The wiki the topic context should be queried from"
  echo "  -t|--target: target wiki - The wiki the generated pages should be pushed to if not set the pages will be generated but not pushed"
  echo "  --topic: name of the topic that should be generated"
}

#
# query
#
query() {
  local l_wiki="$1"
  local l_ask="$2"
  local l_json="$3"
  local l_cache=$4
  #echo "cache: $l_cache"
  if [ ! -f $l_json ] ||  [ ! $l_cache = true ]
  then
    color_msg $blue "quering $l_json from $l_wiki"
    wikiquery -l --source $l_wiki --query "$l_ask"  > "$l_json"
  else
    color_msg $green "$l_json already queried"
  fi
}

#
# show the count of entries in the given json file
#
showCount() {
  local l_json="$1"
  local l_title="$2"
  jq=$(which jq)
  if [ $? -ne 0 ]
  then
     color_msg $red "jq is not installed"
  else
     count=$($jq '.[] | length' $l_json)
     color_msg $green "$count $l_title found"
  fi
}


wiki=""
cache=true
topic=""
# commandline option
while [ "$1" != "" ]
do
  option=$1
  shift
  case $option in
    -h|--help)
       usage;;
    --nocache)
       cache=false
       ;;
    -s|--source)
      if [ $# -lt 1 ]
      then
        usage
      fi
      source_wiki="$1"
      shift
      ;;
    -t|--target)
      if [ $# -lt 1 ]
      then
        usage
      fi
      target_wiki=$1
      shift
      ;;
    --topic)
      if [ $# -lt 1 ]
      then
        usage
      fi
      topic="$1"
      shift
      ;;
  esac
done

topicAsk="[[Topic name::$topic]]|mainlabel=pageTitle|?topic name=name|?topic pluralName=pluralName|?topic documentation=documentation|?topic wikiDocumentation=wikiDocumentation"
propAsk="[[Property name::+]][[Property topic::Concept:$topic]]|mainlabel=pageTitle| ?Property name = name | ?Property label = label | ?Property type = type| ?Property index = index | ?Property sortPos = sortPos | ?Property primaryKey = primaryKey| ?Property mandatory = mandatory| ?Property namespace = namespace| ?Property size = size| ?Property uploadable = uploadable | ?Property defaultValue = defaultValue | ?Property inputType = inputType| ?Property allowedValues = allowedValues| ?Property documentation = documentation | ?Property values_from = values_from | ?Property showInGrid = showInGrid | ?Property isLink = isLink | ?Property nullable = nullable | ?Property topic = topic | ?Property regex=regexp"

# target wiki is mandatory
if [ "$source_wiki" = "" ]
then
  usage
  exit
fi

if [ "$topic" = "" ]
then
  usage
  exit
fi

scriptbase=$(pwd)
base=/tmp/wikirender/$wiki
if [ ! -d $base ]
then
  mkdir -p $base
fi

cd $base
query $source_wiki "$topicAsk" topics.json $cache $base
showCount topics.json Topics
query $source_wiki "$propAsk" properties.json $cache $base
showCount properties.json Properties
cd $scriptbase
python -m wikifile.wikiRender -m "generate_entity_pages" -s $source_wiki --wikiTextPath $base --topic $base/topics.json --properties $base/properties.json -f -p $topic --debug

if [ "$target_wiki" != "" ]
then
  echo "Pushing generated pages to" $target_wiki
  cd $base
  wikirestore --backupPath . -t $target_wiki
fi
